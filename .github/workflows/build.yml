name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  #VCINSTALLDIR: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/
  #Qt5_DIR: Qt\5.13.1\msvc2017_64\lib\cmake\Qt5\
  #QTDIR: Qt\5.13.1\msvc2017_64\
  QTVER: 6.2.0
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release



        
jobs:
  windows:
    timeout-minutes: 15
    runs-on: windows-2019

    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install qt
      run: | 
        pip --version
        python --version
        pip install yaqti
        python -m yaqti install --help
        python -m yaqti install --version ${{env.QTVER}} --platform desktop --os windows  --modules qt5compat    

    - name: Configure
      shell: cmd
      run: cmake -B ${{github.workspace}}/build  -DCPACK_IFW_ROOT=Qt/Tools/QtInstallerFramework/3.1 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G"Visual Studio 16 2019" ..

    - name: Compile
      shell: cmd
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 4

    - name: Package
      shell: cmd
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target package

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/gh-greets-qt_installer.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install qt
      run: | 
        pip --version
        python --version
        pip install yaqti
        python -m yaqti install --help
        python -m yaqti install --output ${{github.workspace}}/build/qt --version ${{env.QTVER}} --platform desktop --os linux --modules qt5compat
        find ${{github.workspace}}/build/qt -iname "Qt6Config.cmake"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH=${{github.workspace}}/build/qt/${{env.QTVER}}/gcc_64/

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      

